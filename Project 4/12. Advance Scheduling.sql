CREATE OR REPLACE TYPE NAME_ARRAY AS VARRAY(100) OF VARCHAR2(50);
/

CREATE OR REPLACE TYPE TIME_ARRAY AS VARRAY(100) OF TIMESTAMP;
/

CREATE OR REPLACE PROCEDURE CREATE_SCHEDULE_ADV_UTIL(p_current_train IN VARCHAR2, start_timestamp IN TIMESTAMP)
IS
    v_counter INTEGER := 1;
    end_timestamp TIMESTAMP;
BEGIN
    end_timestamp := start_timestamp + NUMTODSINTERVAL( 3, 'SECOND');

    FOR i IN 1..13 LOOP
        DBMS_OUTPUT.PUT_LINE('Inserting schedule for train: ' || p_current_train || ' and ' || 'S' || LPAD(v_counter, 3, '0'));
        
        INSERT INTO SCHEDULE(ARRIVAL_TIME, DEPARTURE_TIME, STATION_STATION_ID, TRAIN_TRAIN_ID, SCHEDULE_ID)
        VALUES (
            start_timestamp + NUMTODSINTERVAL((i-1)*10, 'MINUTE') + NUMTODSINTERVAL(1, 'DAY'),
            end_timestamp + NUMTODSINTERVAL((i-1)*10, 'MINUTE') + NUMTODSINTERVAL(1, 'DAY'),
            'S' || LPAD(v_counter, 3, '0'),
            p_current_train,
            schedule_schedule_id_seq.NEXTVAL -- Assuming sequence exists
        );
        COMMIT;
        v_counter := v_counter + 1;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error creating schedule for train ' || p_current_train || ': ' || SQLERRM);
        RAISE;
END;
/

SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE CREATE_SCHEDULE_ADV
IS
    EXISTING_TRAIN_IDS_LIST NAME_ARRAY;
    EXISTING_TRAINS_TIMESTAMPS TIME_ARRAY;
    PEAK_HOUR_TRAIN_LIST NAME_ARRAY; 
    IS_PRESENT BOOLEAN;
    REQUIRED_TRAIN_ID VARCHAR2(20);
    REQUIRED_TIMESTAMP TIMESTAMP;
    CURRENT_DATE VARCHAR(20);
    IS_HOLIDAY INTEGER := 0;
BEGIN
    -- Get the list of trains where mismanagement happened
    SELECT TRAIN_TRAIN_ID BULK COLLECT INTO PEAK_HOUR_TRAIN_LIST FROM Peak_Hours;
    FOR i IN 1 .. PEAK_HOUR_TRAIN_LIST.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('PEAK HOUR TRAIN : ' || PEAK_HOUR_TRAIN_LIST(i));
    END LOOP;
    
    -- GETTING THE DETAILS OF THE EXISTING TRAIN
    SELECT Train_ID 
        BULK COLLECT INTO EXISTING_TRAIN_IDS_LIST FROM Train order by 1;
    SELECT SOURCE_TIME 
        BULK COLLECT INTO EXISTING_TRAINS_TIMESTAMPS FROM TRAIN ORDER BY TRAIN_ID;

    -- IF THE NEW DAY IS UNDER THE HOLIDAY THEN THE PEAK HOUR WILL NOT BE CONSIDERED ...
    SELECT 
        COUNT(*) INTO IS_HOLIDAY
        FROM HOLIDAYS WHERE TO_CHAR(HOLIDAY_DATE, 'DD-MM-YY') = (
            SELECT 
                TO_CHAR( (SOURCE_TIME + + NUMTODSINTERVAL(1, 'DAY')) , 'DD-MM-YY')
                FROM TRAIN WHERE TRAIN_ID = 'T01');

    DBMS_OUTPUT.PUT_LINE('HOLIDAY STATUS: '|| IS_HOLIDAY);

    -- HERE I NEED TO UPDATE THE DATA FROM THE TABLE TRAIN
    FOR i IN 1 .. EXISTING_TRAIN_IDS_LIST.COUNT LOOP
        UPDATE TRAIN 
            SET SOURCE_TIME = (EXISTING_TRAINS_TIMESTAMPS(i) + NUMTODSINTERVAL(1, 'DAY'))
            WHERE Train_ID = EXISTING_TRAIN_IDS_LIST(i);
    END LOOP;
    
    IF IS_HOLIDAY = 0 THEN
        -- WIPE OUT THE DATA OF THE PEAK HOUR AND THE SCHEDULE ...
        DELETE FROM Peak_Hours;
        DELETE FROM SCHEDULE;
    
        -- CREATE THE SCHEDULE FOR THE FIRST TRAIN ...
        FOR i IN 1 .. EXISTING_TRAIN_IDS_LIST.COUNT LOOP
            -- FIND IF THE TRAIN: EXISTING_TRAIN_IDS_LIST(i) IS THERE IN THE NEW_LIST 
            -- IF THE TRAIN IS THERE THEN CREATE THE SCHEDULE FOR THE TWO TRAINS AND
            -- APPEND 
            IS_PRESENT := FALSE;
            FOR J IN 1 .. PEAK_HOUR_TRAIN_LIST.COUNT LOOP
                IF ( EXISTING_TRAIN_IDS_LIST(I) = PEAK_HOUR_TRAIN_LIST(J)) THEN
                    IS_PRESENT := TRUE;
                END IF;
            END LOOP;
            

            IF (IS_PRESENT = TRUE) THEN
                -- I WILL HAVE THE SCHEDULE FOR THE NEW TRAIN ALSO FIRST
                -- FIRST ADD THE NEW TRAIN IN THE TRAIN WITH THE TIME
                REQUIRED_TRAIN_ID := 'T' || LPAD(TRAIN_ID_SEQ.NEXTVAL, 2, '0');
                REQUIRED_TIMESTAMP := EXISTING_TRAINS_TIMESTAMPS(i) - NUMTODSINTERVAL(10, 'MINUTE');
                INSERT INTO TRAIN(TRAIN_ID, SOURCE_STATION_ID, TARGET_STATION_ID, TRAIN_CAPACITY, SOURCE_TIME)
                    VALUES ( REQUIRED_TRAIN_ID, 'S001', 'S013', 100, REQUIRED_TIMESTAMP);
                CREATE_SCHEDULE_ADV_UTIL( REQUIRED_TRAIN_ID, REQUIRED_TIMESTAMP);
                DBMS_OUTPUT.PUT_LINE(' TRAIN ID: ' || REQUIRED_TRAIN_ID || '  WITH THE TIME STAMP: ' || REQUIRED_TIMESTAMP);
            END IF;

            -- I WILL HAVE THE SCHEDULE FOR HE CURRENT TRAIN
            CREATE_SCHEDULE_ADV_UTIL( EXISTING_TRAIN_IDS_LIST(i), EXISTING_TRAINS_TIMESTAMPS(i));
            DBMS_OUTPUT.PUT_LINE(' TRAIN ID: ' || EXISTING_TRAIN_IDS_LIST(i) || '  WITH THE TIME STAMP: ' || EXISTING_TRAINS_TIMESTAMPS(i));
        END LOOP;
    ELSE
        DBMS_OUTPUT.PUT_LINE('HURRAY! IT IS A HOLIDAY. THUS NO PEAK HOURS CONSIDERATION ...');
        DELETE FROM SCHEDULE;

        FOR i IN 1 .. EXISTING_TRAIN_IDS_LIST.COUNT LOOP
            -- I WILL HAVE THE SCHEDULE FOR HE CURRENT TRAIN
            CREATE_SCHEDULE_ADV_UTIL( EXISTING_TRAIN_IDS_LIST(i), EXISTING_TRAINS_TIMESTAMPS(i));
            DBMS_OUTPUT.PUT_LINE(' TRAIN ID: ' || EXISTING_TRAIN_IDS_LIST(i) || '  WITH THE TIME STAMP: ' || EXISTING_TRAINS_TIMESTAMPS(i));
        END LOOP;
    END IF;

    
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: '|| SQLERRM);
END;
/

EXEC CREATE_SCHEDULE_ADV();